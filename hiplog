#!/usr/bin/env ruby
# hiplog - archive HipChat private chats to local disk
# Andrew Ho (andrew@zeuscat.com)
# https://github.com/andrewgho/hiplog
#
# Copyright (c) 2016, Andrew Ho.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# Neither the name of the author nor the names of its contributors may
# be used to endorse or promote products derived from this software
# without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'optparse'
require 'net/http'
require 'net/https'
require 'uri'
require 'cgi'
require 'fileutils'

require 'rubygems'
require 'json'

ME = File.basename($0)
USAGE = "usage: #{ME} [-h] [-v] [-d dir] -t token user1 [user2 ...]\n"
FULL_USAGE = USAGE + <<'end'
    -h           display this help text and exit
    -v           verbose mode, print URLs and filenames to stderr
    -d dir       output directory (default hiplogs)
    -t token     HipChat access token
    user1 ...    list of users to archive HipChat private chats from
end

# Main loop, run at end of file
def main(argv)
  verbose = false
  output_dir = 'hiplogs'
  access_token = ENV['HIPCHAT_ACCESS_TOKEN'] || begin
    IO.read(File.join(ENV['HOME'], '.hipchat_access_token')).chomp
  rescue Errno::ENOENT, Errno::EACCES
  end
  users = []

  # Parse command line options
  OptionParser.new do |opts|
    opts.on('-h',       '--help')         { puts FULL_USAGE; exit 0 }
    opts.on('-v',       '--verbose')      { verbose = true }
    opts.on('-d DIR',   '--output-dir')   { |s| output_dir = s }
    opts.on('-t TOKEN', '--access-token') { |s| access_token = s }
    begin
      opts.parse!(argv)
    rescue OptionParser::InvalidOption => e
      abort "#{ME}: #{e}\n#{USAGE}"
    end
  end
  users.replace(argv)
  abort "#{ME}: missing required access token\n#{USAGE}" unless access_token
  abort "#{ME}: missing required list of users\n#{USAGE}" if users.empty?

  # Fetch chat history items in batches of 100 until no items are returned
  hiplog = HipLog.new(access_token)
  hiplog.verbose! if verbose
  num_errors = 0
  users.each do |user|
    num_items = 0
    last_date = nil
    while true
      query = 'reverse=false&max-results=100'
      query.add_param!(:date, last_date) if last_date  # first query has no date
      response = hiplog.user_request("/history?#{query}", user)
      if !response.is_a?(Hash)
        abort "#{ME}: response is not a JSON object: #{response.to_pjson}"
      elsif !response.key?('items')
        abort "#{ME}: response does not contain items:\n#{response.to_pjson}"
      elsif response['items'].empty?
        if num_items == 0
          $stderr.puts "#{ME}: no chat history found for user: #{user}"
          num_errors += 1
        end
        break  # no more chat logs earlier than this date
      end
      last_date = response['items'][-1]['date']  # earliest date in this batch

      # Output chat history to :output_dir/:user/:iso8601date.json
      output_file = last_date.split(/\./).first.gsub(/[-:]/, '') + '.json'
      output_path = File.join(output_dir, user, output_file)
      $stderr.puts(output_path) if verbose
      FileUtils.mkdir_p(File.dirname(output_path))
      File.open(output_path, 'w') { |out| out.puts response.to_pjson }
      num_items += response['items'].size

      # TODO: go through JSON and fetch file attachments
    end
  end

  num_errors
end

class HipLog
  # Initialize HipLog with a HipChat API access token
  def initialize(access_token)
    @access_token = access_token
    @verbose = false
  end

  # Turn on verbose mode (print URLs to stderr before fetching them)
  def verbose!
    @verbose = true
  end

  # Fetch request and parse as JSON, abort with errors if they occur
  def request(uri_path)
    uri = URI.parse(uri_path)
    unless uri.scheme && uri.host
      uri.scheme ||= 'https'
      uri.host ||= 'api.hipchat.com'
      uri = URI.parse(uri.to_s)  # promote URI::Generic to URI::HTTPS
    end
    uri.add_param!(:auth_token, @access_token)
    $stderr.puts uri.to_s if @verbose
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true if uri.scheme == 'https'
    response = http.request(Net::HTTP::Get.new(uri.request_uri))
    if response.is_a?(Net::HTTPSuccess)
      body = response.body
      abort "#{ME}: response body is empty:\n#{uri.to_s}" if body.empty?
      begin
        return JSON.parse(body)
      rescue JSON::ParserError => e
        abort "#{ME}: JSON parser error #{e}:\n#{uri.to_s}\n#{body.chomp}\n"
      end
    else
      response.extend(HTTPResponseError)
      abort "#{ME}: request returned error:\n#{uri.to_s}\n#{response.to_s}"
    end
  end

  # Fetch /v2/user/:user based request
  def user_request(uri_subpath, user = nil)
    raise 'user not specified' unless user
    request("/v2/user/#{CGI::escape(user)}#{uri_subpath}")
  end
end

# Return object or list as pretty-printed JSON
class Hash; def to_pjson; JSON.pretty_generate(self); end; end
class Array; def to_pjson; JSON.pretty_generate(self); end; end

module URI
  # Mutate URI so that its query string has new name/value pair added
  def add_param!(name, value)
    self.query.add_param!(name, value)
  end
end

class String
  # Return new query string with new name/value pair added
  def add_param(name, value)
    params = CGI.parse(self)
    if params.key?(name.to_s)
      params[name.to_s] << value
    else
      params[name.to_s] = [value]
    end
    if URI.respond_to?(:encode_www_form)
      URI.encode_www_form(params)
    else
      # URI in Ruby versions prior to 1.9 do not have encode_www_form()
      params.keys.inject([]) do |pairs, k|
        params[k].each { |v| pairs << "#{CGI::escape(k)}=#{CGI::escape(v)}" }
        pairs
      end.join('&')
    end
  end

  # Mutate string into query string with new name/value pair added
  def add_param!(name, value)
    replace(add_param(name, value))
  end
end

class UUID
  # Convert standard hex-encoded UUID to filename safe Base64 encoded UUID
  def self.hex2base64(hex_uuid)
    hex_number = hex_uuid.gsub(/-/, '').downcase
    [[hex_number].pack('H*')].  # hex digits to bytes
      pack('m0').               # bytes to Base64 without linefeeds
      tr('+/', '-_').           # standard Base64 to URL safe Base64
      sub(/=+\Z/, '')           # chomp trailing padding
  end
end

# HTTPResponseError adds error_response() for human-readable HTTP error
module HTTPResponseError
  def to_s
    lines =
      [ "HTTP/%s %s %s" % [ self.http_version, self.code, self.message ] ]
    response.header.each_capitalized { |k, v| lines << "#{k}: #{v}" }
    lines << ''
    lines << response.body if response.body
    lines.join("\015\012")
  end
end

# If run from command line, run main loop and exit
exit main(ARGV) if __FILE__ == $0
